Para um método no controller não encaminhar a requisição a uma página JSP, ou Thymeleaf, 
devemos utilizar a anotação @ResponseBody;

O Spring, por padrão, converte os dados no formato JSON, utilizando a biblioteca Jackson;

Para não repetir a anotação @ResponseBody em todos os métodos do controller, 
devemos utilizar a anotação @RestController;

Para não precisar reiniciar manualmente o servidor a cada alteração feita no código, 
basta utilizar o módulo Spring Boot DevTools;

Não é uma boa prática retornar entidades JPA nos métodos dos controllers, 
sendo mais indicado retornar classes que seguem o padrão DTO (Data Transfer Object);

Para utilizar o JPA no projeto, devemos incluir o módulo Spring Boot Data JPA, 
que utiliza o Hibernate, por padrão, como sua implementação;

Para configurar o banco de dados da aplicação, devemos adicionar as propriedades 
do datasource e do JPA no arquivo src/main/resources/application.properties;

Para acessar a página de gerenciamento do banco de dados H2, devemos configurar o console 
do H2 com propriedades no arquivo src/main/resources/application.properties;
Utilizar a seguinte anotação para não ter problema de tabela nao encontrada 
ao subir o projeto utilizando o data.sql
spring.jpa.defer-datasource-initialization=true

Para que o Spring Boot popule automaticamente o banco de dados da aplicação, 
devemos criar o arquivo src/main/resources/data.sql;

Para criar um Repository, devemos criar uma interface, que herda 
da interface JPARepository do Spring Data JPA;

Para criar consultas que filtram por atributos da entidade, devemos seguir o 
padrão de nomenclatura de métodos do Spring, como por exemplo findByCursoNome;
    
Para criar manualmente a consulta com JPQL, devemos utilizar a anotação @Query;

Para evitar repetir a URL em todos os métodos, devemos utilizar a anotação 
@RequestMapping em cima da classe controller;

Para mapear requisições do tipo POST, devemos utilizar a anotação @PostMapping;

Para receber dados enviados no corpo da requisição, a boa prática é criar 
uma classe que também siga o padrão DTO (Data Transfer Object);

A boa prática para métodos que cadastram informações é devolver o código HTTP 201, 
ao invés do código 200;

Para montar uma resposta a ser devolvida ao cliente da API, 
devemos utilizar a classe ResponseEntity do Spring;

Para testar requisições do tipo POST, precisamos utilizar alguma ferramenta 
de testes de API Rest (Postman);

Para fazer validações das informações enviadas pelos clientes da API, 
podemos utilizar a especificação Bean Validation, com as anotações @NotNull, @NotEmpty, 
@Size, dentre outras;

Para o Spring disparar as validações do Bean Validation e devolver um erro 400, 
caso alguma informação enviada pelo cliente esteja inválida, devemos utilizar a 
anotação @Valid;

Para interceptar as exceptions que forem lançadas nos métodos das classes controller, 
devemos criar uma classe anotada com @RestControllerAdvice;

Para tratar os erros de validação do Bean Validation e personalizar o JSON, 
que será devolvido ao cliente da API, com as mensagens de erro, devemos
criarar um método na classe @RestControllerAdvice e anotá-lo com @ExceptionHandler 
e @ResponseStatus.

Para utilizar o módulo de cache do Spring Boot, devemos adicioná-lo como dependência 
do projeto no arquivo pom.xml;
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-cache</artifactId>
</dependency>

Para habilitar o uso de caches na aplicação, devemos adicionar a anotação @EnableCaching 
na classe main;

Para que o Spring guarde o retorno de um método no cache, devemos anotá-lo com @Cacheable;

Para o Spring invalidar algum cache após um determinado método ser chamado, devemos anotá-lo com @CacheEvict;

Para utilizar o Spring Security adicionar o seguinte no pom.xml:
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-security</artifactId>
</dependency>


Para habilitar e configurar o controle de autenticação e autorização do projeto, devemos criar
uma classe e anotá-la com @Configuration e @EnableWebSecurity;

Para liberar acesso a algum endpoint da nossa API, devemos chamar o método 
http.authorizeRequests().antMatchers().permitAll() dentro do método configure(HttpSecurity http), 
que está na classe SecurityConfigurations;

O método anyRequest().authenticated() indica ao Spring Security para bloquear todos os 
endpoints que não foram liberados anteriormente com o método permitAll();

Para implementar o controle de autenticação na API, devemos implementar a interface 
UserDetails na classe Usuario e também implementar a interface GrantedAuthority na 
classe Perfil;

Para o Spring Security gerar automaticamente um formulário de login, devemos chamar o método
and().formLogin(), dentro do método configure(HttpSecurity http), que está na classe 
SecurityConfigurations;

A lógica de autenticação, que consulta o usuário no banco de dados, deve implementar a 
interface UserDetailsService;

Devemos indicar ao Spring Security qual o algoritmo de hashing de senha que utilizaremos na API, chamando o método passwordEncoder(), dentro do 
método configure(AuthenticationManagerBuilder auth), que está na classe SecurityConfigurations.

		
		